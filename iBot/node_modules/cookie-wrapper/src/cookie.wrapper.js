"use strict";
var cookie_1 = require('./cookie');
/**
 * Wraps Cookie sessions into a decent-to-use class for TypeScript projects.
 *
 * Allows for most usual operations done over cookies, ie:
 *  - get a Cookie - getKey(<key:string>)
 *  - set a Cookie - setKey(<key:string>, <value:string>)
 *  - remove a Cookie - removeKey(<key:string>)
 *  - list all Cookie keys - queryKeys()
 */
var CookieWrapper = (function () {
    function CookieWrapper(domain) {
        if (domain === void 0) { domain = ""; }
        this.domain = domain;
        this.keys = {};
        this.parseKeys();
    }
    /**
     * Returns a key stored in the Cookie session
     * @param key
     * @returns {Cookie}
     */
    CookieWrapper.prototype.getKey = function (key) {
        this.parseKeys();
        if (!this.keys[key])
            return undefined;
        return this.keys[key];
    };
    /**
     * Sets a cookie in the Cookie session
     * @param key
     * @param value
     * @param expiration
     * @returns {Cookie}
     */
    CookieWrapper.prototype.setKey = function (key, value, expiration) {
        if (expiration === void 0) { expiration = ''; }
        var cookie = new cookie_1.default(key, value, this.domain, expiration);
        this.keys[key] = cookie;
        return cookie;
    };
    /**
     * Removes a cookie from the Cookie session
     * @deprecated: use the cookie object itself after using getKey
     * @param key
     */
    CookieWrapper.prototype.removeKey = function (key) {
        var cookie = this.keys[key];
        cookie.delete();
    };
    /**
     * Returns a list of all the Cookie keys
     * @returns {Array<string>}
     */
    CookieWrapper.prototype.queryKeys = function () {
        this.parseKeys();
        if (!Object.keys(this.keys))
            return [];
        return Object.keys(this.keys);
    };
    /**
     * Sets Expiration date on a key
     * @param key
     * @param days
     * @returns {Cookie}
     */
    CookieWrapper.prototype.setExpiration = function (key, days) {
        this.parseKeys();
        var expiration = new Date();
        expiration.setDate(expiration.getDate() + days);
        var cookie = this.getKey(key);
        cookie.expires = expiration.toISOString();
        cookie.save();
        return cookie;
    };
    /**
     * Populates this.keys as a Javascript Object indexing all Cookie objects currently in the
     * browser session
     */
    CookieWrapper.prototype.parseKeys = function () {
        var _this = this;
        var crumbs = document.cookie.split("; ");
        if (!crumbs[crumbs.length - 1]) {
            crumbs.pop();
        }
        var keys = JSON.parse("{" +
            crumbs.map(function (crumb) {
                var crumbArr = crumb.split(/=/);
                return "\"" + crumbArr[0] + "\": \"" + crumbArr[1] + "\"";
            }).join(",") +
            "}");
        this.keys = {};
        Object.keys(keys).forEach(function (key) {
            _this.keys[key] = new cookie_1.default(key, keys[key].value, keys[key].domain, keys[key].expires, keys[key].path);
        });
    };
    return CookieWrapper;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CookieWrapper;
