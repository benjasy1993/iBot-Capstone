import Cookie from './cookie';
/**
 * Wraps Cookie sessions into a decent-to-use class for TypeScript projects.
 *
 * Allows for most usual operations done over cookies, ie:
 *  - get a Cookie - getKey(<key:string>)
 *  - set a Cookie - setKey(<key:string>, <value:string>)
 *  - remove a Cookie - removeKey(<key:string>)
 *  - list all Cookie keys - queryKeys()
 */
export default class CookieWrapper {
    private domain;
    private keys;
    constructor(domain?: string);
    /**
     * Returns a key stored in the Cookie session
     * @param key
     * @returns {Cookie}
     */
    getKey(key: string): Cookie;
    /**
     * Sets a cookie in the Cookie session
     * @param key
     * @param value
     * @param expiration
     * @returns {Cookie}
     */
    setKey(key: string, value: any, expiration?: string): Cookie;
    /**
     * Removes a cookie from the Cookie session
     * @deprecated: use the cookie object itself after using getKey
     * @param key
     */
    removeKey(key: string): void;
    /**
     * Returns a list of all the Cookie keys
     * @returns {Array<string>}
     */
    queryKeys(): Array<string>;
    /**
     * Sets Expiration date on a key
     * @param key
     * @param days
     * @returns {Cookie}
     */
    setExpiration(key: string, days: number): Cookie;
    /**
     * Populates this.keys as a Javascript Object indexing all Cookie objects currently in the
     * browser session
     */
    private parseKeys();
}
