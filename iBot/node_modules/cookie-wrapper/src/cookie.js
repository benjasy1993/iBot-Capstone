"use strict";
/**
 * A class that represents a browser's Cookie string, in an object format
 * Allows for:
 *  - creating a Cookie - new Cookie(
 *      <key:string>, <value:string>, <domain:?string>, <expires:?string>, <path:?string>
 * )
 *  - delete a Cookie - delete()
 *  - convert a Cookie to a browser Cookie string - toCookieString()
 *  - save a Cookie - save()
 *
 *  TODO: endpoint to serve a Cookie as an Observable
 */
var Cookie = (function () {
    function Cookie(key, value, domain, expires, path) {
        if (domain === void 0) { domain = ''; }
        if (expires === void 0) { expires = ''; }
        if (path === void 0) { path = '/'; }
        this.key = key;
        this.path = path;
        this.value = value;
        this.domain = domain;
        this.expires = expires;
        this.save();
    }
    /**
     * Deletes this cookie, ie, sets the expiry date to before current date.
     */
    Cookie.prototype.delete = function () {
        this.expires = 'Thu, 01 Jan 1970 00:00:01 GMT';
        this.path = '/';
        this.save();
    };
    /**
     * Generates a string in the format that document.cookie reads.
     */
    Cookie.prototype.toCookieString = function () {
        var cookie = this.key + "=" + this.value + ";";
        if (this.expires) {
            cookie += "expires=" + this.expires + ";";
        }
        if (this.domain) {
            cookie += "domain=" + this.domain + ";";
        }
        if (this.path) {
            cookie += "path=" + this.path + ";";
        }
        return cookie;
    };
    /**
     * Stores this cookie to the current document.
     */
    Cookie.prototype.save = function () {
        document.cookie = this.toCookieString();
    };
    return Cookie;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Cookie;
